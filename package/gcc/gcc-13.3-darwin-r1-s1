# SDK2 package definition for gcc

# Set package-specific variables

PACKAGE_NAME=gcc
SRC_FILE=gcc-13-branch-gcc-13.3-darwin-r1.tar.gz
PATCH_FILES=(gcc-13.3-darwin-r0-fix-cfi-startproc-error.diff gcc-13.3-zlib-header.diff)

SRC_DIR=$PACKAGE_NAME
BUILD_DIR=${PACKAGE_NAME}-build

# Functions

build () {

    echo "Building $PACKAGE_NAME in $BD"

    # Create the build dir

    rm -rf $BD
    mkdir $BD

    cd $BD

    # Remove existing executables & wrappers from DEST_ROOT

    for exec in c++ cpp g++ gcc gfortran; do
	rm -fv ${DEST_ROOT}/bin/$exec ${DEST_ROOT}/bin/$exec.exec
    done

    rm -fv ${DEST_ROOT}/bin/gcc.wrapper
    rm -fv ${DEST_ROOT}/bin/gfortran.wrapper

    # Workaround issues with GCC/LLVM compilers

    if gcc -v 2>&1 | grep -q LLVM; then
	export CC="gcc -D_FORTIFY_SOURCE=0"
    fi

    # Set extra configuration options

    EXTRA_CONFIG_OPTS=

    if [[ $SDK2_PLATFORM_NAME = 'Darwin' ]]; then
	EXTRA_CONFIG_OPTS="$EXTRA_CONFIG_OPTS --with-sysroot=${DEST_ROOT}/sysroot"
    elif [[ $SDK2_PLATFORM_NAME = 'Linux' ]]; then
	EXTRA_CONFIG_OPTS="$EXTRA_CONFIG_OPTS --enable-clocale=generic"
    fi

    # Configure

    ${SD}/configure CC="$CC_TOOLS" CXX="$CXX_TOOLS" \
        --build=$BUILD_SPEC \
        --host=$BUILD_SPEC \
        --target=$BUILD_SPEC \
	--prefix=$DEST_ROOT \
	--with-gmp=$DEST_ROOT \
	--with-mpfr=$DEST_ROOT \
	--with-mpc=$DEST_ROOT \
	--enable-languages=c,c++,fortran \
	--disable-multilib \
	--disable-nls \
	$EXTRA_CONFIG_OPTS

    if [ $? -ne 0 ]; then
	echo "FAILED in configure for $PACKAGE_NAME"
	exit 1
    fi

    # Build

    make -j$NCORES FLAGS_FOR_TARGET="$CPPFLAGS"

    if [ $? -ne 0 ]; then
	echo "FAILED in make for $PACKAGE_NAME"
	exit 1
    fi

}

install () {

    echo "Installing $PACKAGE_NAME from $BD"

    # Install

    cd $BD

    make install

    # Install docs

    cd $SD

    mkdir -pv ${DEST_ROOT}/share/doc/gcc
    cp -av COPYING* INSTALL LAST_UPDATED MAINTAINERS NEWS README ${DEST_ROOT}/share/doc/gcc

    # Install the wrapper scripts

    for exec in c++ cpp g++ gcc; do
	mv -v ${DEST_ROOT}/bin/$exec ${DEST_ROOT}/bin/$exec.exec
	ln -sfv gcc.wrapper ${DEST_ROOT}/bin/$exec
    done

    for exec in gfortran; do
	mv -v ${DEST_ROOT}/bin/$exec ${DEST_ROOT}/bin/$exec.exec
	ln -sfv gfortran.wrapper ${DEST_ROOT}/bin/$exec
    done

    case $SDK2_PLATFORM_NAME in
	Linux)
	    script_dir=${SDK2_PROFILE_ROOT}/common/gcc-`uname -m`-linux
	    ;;
	Darwin)
	    script_dir=${SDK2_PROFILE_ROOT}/common/gcc-macos
	    ;;
	*)
	    echo "Unable to determine which wrapper scripts to use"
	    exit 1
    esac

    for file in gcc.wrapper gfortran.wrapper; do

	sed -e s/@SDK_ROOT@/\${${PROFILE_PREFIX}_ROOT}/g \
	    -e s/@SDK_MATH_SLOT@/\${${PROFILE_PREFIX}_MATH_SLOT}/g \
	    ${script_dir}/${file} > ${DEST_ROOT}/bin/${file}
	chmod a+x ${DEST_ROOT}/bin/${file}

    done

    # On OSX, replace stub libraries by links to the full
    # library. This is necessary because the install names of stub
    # libraries can't be changed using install_name_tool (nor can they
    # be codesigned without creating extended attributes)

    if [[ $SDK2_PLATFORM_NAME = 'Darwin' ]]; then
	for lib in ${DEST_ROOT}/lib/*.dylib; do
            if [ -f $lib ]; then
		if `file $lib | grep -q 'Mach-O .* shared library stub'`; then
                    full_lib_name=`otool -D $lib | awk 'NR == 2' | xargs basename`
                    rm $lib
                    ln -sfv $full_lib_name $lib
		fi
            fi
	done
    fi

}
